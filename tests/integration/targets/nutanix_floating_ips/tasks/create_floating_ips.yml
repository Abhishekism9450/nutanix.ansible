---
- name: Create floating ip with external subnet
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      uuid: "{{ external_subnet.uuid }}"
  register: result
  ignore_errors: True
- debug:
    var: result
- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with external subnet "
    success_msg: " Floating ip with external subnet name created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.floating_ip_uuid ] }}"


- name: Create floating ip with vpc name and external subnet name
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      name: "{{ external_subnet.name }}"
    vpc:
       name: "{{ vpc.name }}"
    private_ip: "{{ private_ip }}"
  register: result
  ignore_errors: True

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vpc name and external subnet name "
    success_msg: " Floating ip with vpc name and external subnet name created successfully "


- name: Delete floating ip 
  ntnx_floating_ips:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    floating_ip_uuid: "{{ result.floating_ip_uuid }}"
  register: result
  ignore_errors: True

#- name: create Floating IP with External Subnet with vm
#  ntnx_floating_ips:
#    validate_certs: False
#    state: present
#    nutanix_host: "{{ IP }}"
#    nutanix_username: "{{ username }}"
#    nutanix_password: "{{ password }}"
#    external_subnet:
#      name: "{{vm_subnet_name}}"
#    vm:
#      name: "{{vm.vm_name}}"
#  ignore_errors: True
#
#  register: result

#- name: Creation Status
#  assert:
#    that:
#      - result.response is defined
#      - result.response.status.state == 'COMPLETE'
#    fail_msg: " Unable to create  Floating ip with vm"
#    success_msg: "  Floating ip created successfully with vm "
#
#- set_fact:
#    todelete: "{{ todelete + [  result.floating_ip_uuid ] }}"
# 
#
#- name: Delete all Created Floating ips
#  ntnx_floating_ips:
#    state: absent
#    nutanix_host: "{{ IP }}"
#    nutanix_username: "{{ username }}"
#    nutanix_password: "{{ password }}"
#    validate_certs: false
#    floating_ip_uuid: "{{ item }}"
#  register: result
#  loop: "{{ todelete }}"
#  ignore_errors: True