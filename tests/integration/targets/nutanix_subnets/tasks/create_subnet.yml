- name: VLAN subnet without IPAM
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: VLAN subnet without IPAM
    vlan_subnet:
      vlan_id: "{{vlan_subnets_ids.0}}"
      virtual_switch:
        name: "{{ Virtual_Switch_Name }}"
      cluster:
        uuid: "{{ ClusterUUID }}"
  register: result

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create VLAN subnet without IPAM "
    success_msg: " VLAN subnet without IPAM created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: VLAN subnet with IPAM
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: VLAN subnet with IPAM
    vlan_subnet:
      vlan_id: "{{vlan_subnets_ids.1}}"
      virtual_switch:
        uuid: "{{ Virtual_Switch_UUID }}"
      cluster:
        name: "{{ ClusterName }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create VLAN subnet with IPAM "
    success_msg: " VLAN subnet with IPAM created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: VLAN subnet with IPAM and IP pools
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: VLAN subnet with IPAM and IP pools
    vlan_subnet:
      vlan_id: "{{vlan_subnets_ids.2}}"
      virtual_switch:
        name: "{{ Virtual_Switch_Name }}"
      cluster:
        name: "{{ ClusterName }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
        ip_pools:
          - start_ip: "{{ Start_IP }}"
            end_ip: "{{ End_IP }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create VLAN subnet with IPAM and IP pools"
    success_msg: " VLAN subnet with IPAM and IP pools created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: VLAN subnet with IPAM IP pools and DHCP
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: VLAN subnet with IPAM IP pools and DHCP
    vlan_subnet:
      vlan_id: "{{vlan_subnets_ids.3}}"
      virtual_switch:
        name: "{{ Virtual_Switch_Name }}"
      cluster:
        name: "{{ ClusterName }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
        ip_pools:
          - start_ip: "{{ Start_IP }}"
            end_ip: "{{ End_IP }}"
        dhcp:
          dns_servers: "{{ DNS_Servers }}"
          domain_search: "{{ Domain_Search }}"
          domain_name: "{{ Domain_Name }}"
          tftp_server_name: "{{ TFTP_Server_Name }}"
          boot_file: "{{ Boot_File }}"
          dhcp_server_ip: "{{ DHCP_Server_IP }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create VLAN subnet with IPAM, IP pools and DHCP "
    success_msg: " VLAN subnet with IPAM, IP pools and DHCP created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: VLAN subnet with IPAM multiple IP pools and DHCP
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: VLAN subnet with IPAM multiple IP pools and DHCP
    vlan_subnet:
      vlan_id: "{{vlan_subnets_ids.4}}"
      virtual_switch:
        name: "{{ Virtual_Switch_Name }}"
      cluster:
        name: "{{ ClusterName }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
        ip_pools:
          - start_ip: "{{ Start_IP }}"
            end_ip: "{{ End_IP }}"
          - start_ip: "{{ Start_IP2 }}"
            end_ip: "{{ End_IP2 }}"
        dhcp:
          dns_servers: "{{ DNS_Servers }}"
          domain_search: "{{ Domain_Search }}"
          domain_name: "{{ Domain_Name }}"
          tftp_server_name: "{{ TFTP_Server_Name }}"
          boot_file: "{{ Boot_File }}"
          dhcp_server_ip: "{{ DHCP_Server_IP }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create VLAN subnet with IPAM, multiple IP pools and DHCP "
    success_msg: " VLAN subnet with IPAM, multiple IP pools and DHCP created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: External subnet without NAT
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: " External subnet without NAT "
    external_subnet:
      vlan_id: "{{external_NoNat_subnet.vlan_id}}"
      enable_nat: false
      cluster:
        uuid: "{{ ClusterUUID }}"
      ipam:
        network_ip: "{{external_NoNat_subnet.Network_IP}}"
        network_prefix: "{{external_NoNat_subnet.Network_Prefix}}"
        gateway_ip: "{{external_NoNat_subnet.gateway_ip}}"
        ip_pools:
          - start_ip: "{{external_NoNat_subnet.dhcp.start_ip}}"
            end_ip: "{{external_NoNat_subnet.dhcp.end_ip}}"
          - start_ip: "{{external_NoNat_subnet.static.start_ip}}"
            end_ip: "{{external_NoNat_subnet.static.end_ip}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create External subnet without NAT  "
    success_msg: " External subnet without NAT  created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"

- name: External subnet with NAT
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: " External subnet with NAT "
    external_subnet:
      vlan_id: "{{external_Nat_subnet.vlan_id}}"
      enable_nat: True
      cluster:
        name: "{{ ClusterName }}"
      ipam:
        network_ip: "{{external_Nat_subnet.Network_IP}}"
        network_prefix: "{{external_Nat_subnet.Network_Prefix}}"
        gateway_ip: "{{external_Nat_subnet.gateway_ip}}"
        ip_pools:
          - start_ip: "{{external_Nat_subnet.dhcp.start_ip}}"
            end_ip: "{{external_Nat_subnet.dhcp.end_ip}}"
          - start_ip: "{{external_Nat_subnet.static.start_ip}}"
            end_ip: "{{external_Nat_subnet.static.end_ip}}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create External subnet with NAT  "
    success_msg: " External subnet with NAT  created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: Overlay Subnet with minimum requirements
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: Overlay Subnet with minimum requirements
    overlay_subnet:
      vpc:
        uuid: "{{ vpc.uuid }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create Overlay Subnet with minimum requirements "
    success_msg: " Overlay Subnet with minimum requirements created successfully "
    
- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"


- name: Delete all Created Subnets
  ntnx_subnets:
    state: absent
    nutanix_host: "{{ IP }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    subnet_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True

- name: Overlay Subnet with IP_pools and DHCP
  ntnx_subnets:
    state: present
    nutanix_host: "{{ IP }}"
    validate_certs: false
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    name: Overlay Subnet with IP_pools and DHCP
    overlay_subnet:
      vpc:
        name: "{{ vpc.name }}"
      ipam:
        network_ip: "{{ Network_IP }}"
        network_prefix: "{{ Network_Prefix }}"
        gateway_ip: "{{ Gateway_IP }}"
        ip_pools:
          - start_ip: "{{ Start_IP }}"
            end_ip: "{{ End_IP }}"
        dhcp:
          dns_servers: "{{ DNS_Servers }}"
          domain_search: "{{ Domain_Search }}"
          domain_name: "{{ Domain_Name }}"
          tftp_server_name: "{{ TFTP_Server_Name }}"
          boot_file: "{{ Boot_File }}"
  register: result
  ignore_errors: true
- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create Overlay Subnet with IP_pools and DHCP "
    success_msg: " Overlay Subnet with IP_pools and DHCP created successfully "
- set_fact:
    todelete: "{{ todelete + [  result.subnet_uuid ] }}"

- name: Delete all Created Subnets
  ntnx_subnets:
    state: absent
    nutanix_host: "{{ IP }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    subnet_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True
