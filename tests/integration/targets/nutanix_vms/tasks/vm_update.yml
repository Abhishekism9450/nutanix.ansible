########################### UPDATE_VM ################################
  - name: VM with minimum requiremnts to update
    ntnx_vms:
      state: present
      name: update vm
      cluster:
        name: "{{ cluster.name }}"
    register: result
    ignore_errors: true

  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
        - result.vm_uuid
        - result.task_uuid
      fail_msg: ' Unable to create VM with minimum requiremnts '
      success_msg: ' VM with minimum requiremnts created successfully '

  - name: Update VM
    ntnx_vms:
      vm_uuid: "{{ result.vm_uuid }}"
      name: updated
      desc: updated
      categories:
        AppType:
          - Apache_Spark
      disks:
        - type: "DISK"
          clone_image: 
            name: "{{ ubuntu }}"
          bus: "SCSI"
          size_gb: 20
        - type: DISK
          size_gb: 3
          bus: PCI
        - type: DISK
          size_gb: 1
          bus: SCSI
          storage_container:
            uuid: "{{ storage_container.uuid }}"
      networks:
        - is_connected: true
          subnet:
            uuid: "{{ network.dhcp.uuid }}"
        - is_connected: false
          subnet:
            uuid: "{{ static.uuid }}"
          private_ip: "{{ network.static.ip }}"
    register: result
    ignore_errors: true
  
  - name: Update Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
        - result.vm_uuid
        - result.task_uuid
      fail_msg: ' Unable to update vm '
      success_msg: ' VM updated successfully '
    
  - name: Update VM by deleting and editing a disk
    ntnx_vms:
      vm_uuid: "{{ result.vm_uuid }}"
      name: updated
      desc: updated
      categories:
        AppType:
          - Apache_Spark
      disks:
        - type: "DISK"
          uuid: "{{ result.response.spec.resources.disk_list[2].uuid }}"
          size_gb: 30
        - state: absent
          uuid: "{{ result.response.spec.resources.disk_list[0].uuid }}"
    register: result

  - name: Update Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
        - result.vm_uuid
        - result.task_uuid
      fail_msg: ' Unable to update vm by deleting and editing a disk '
      success_msg: ' VM updated successfully '
  
  - name: Update VM by deleting a subnet
    ntnx_vms:
      vm_uuid: "{{ result.vm_uuid }}"
      name: updated
      desc: updated
      categories:
        AppType:
          - Apache_Spark
      networks:
        - state: absent
          uuid: "{{ result.response.spec.resources.nic_list[1].uuid }}"
    register: result

  - name: Update Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
        - result.vm_uuid
        - result.task_uuid
      fail_msg: ' Unable to update vm by deleting a subnet '
      success_msg: ' VM updated successfully '

  - name: Update VM by deleting it
    ntnx_vms:
      state: absent
      vm_uuid: "{{ result.vm_uuid }}"
    register: result
    ignore_errors: true

  - name: Update Status
    assert:
      that:
        - result.response is defined
        - result.vm_uuid
        - result.task_uuid
      fail_msg: ' Unable to update the vm by deleting it '
      success_msg: ' VM deleted successfully '
