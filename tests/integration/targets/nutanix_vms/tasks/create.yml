  
  - name: Add Script to attached file test.yml
    copy:
      dest: "test.yml"
      content: |
         #cloud-config
         chpasswd:
           list: |
             root:Nutanix.123
             expire: False
         fqdn: myNutanixVM 
    
          

  ################################################################
  
  - name: VM with ubuntu image and different specifications 
    ntnx_vms:
      state: present
      nutanix_host: "{{ IP }}"
      validate_certs: False
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      name: "VM with Ubuntu image"
      desc: "VM with cluster, network, category, disk with Ubuntu image, guest customization "
      categories:
        AppType:
          - "Apache_Spark"
      cluster:
        name: "{{ClusterName}}"
      networks:
        - is_connected: True
          subnet:
            name: "{{ NetworkName }}"
      disks:
        - type: "DISK"
          size_gb: 30
          bus: "SATA"
          clone_image:
            name: "{{ Ubuntu }}"
      vcpus: 1
      cores_per_vcpu: 1
      memory_gb: 1
      guest_customization:
        type: "cloud_init"
        script_path: "./test.yml"
        is_overridable: True
    register: result
    
    
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: 'Unable to Create VM with Ubuntu image and different specifications  '
      success_msg: 'VM with Ubuntu image and different specifications created successfully '
    
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

    
    
  #########################################################################################
    
    
  - name: VM with CentOS-7-cloud-init image
    ntnx_vms:
      state: present
      name: VM with CentOS-7-cloud-init image 
      timezone: "UTC"
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      cluster:
        name: "{{ ClusterName }}"
      disks:
        - type: "DISK"
          size_gb: 10
          clone_image:
            name:  "{{ CentOS }}"
          bus: "SCSI"
      guest_customization:
        type: "cloud_init"
        script_path: "./test.yml"
        is_overridable: True
    register: result
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: 'Unable to create VM with CentOS-7-cloud-init image'
      success_msg: 'VM with CentOS-7-cloud-init image created successfully '


  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'  
      
  #################################################################################
  
  
  - name: VM with Cluster, Network, Universal time zone, one Disk
    ntnx_vms:
      state: present
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      name: "VM with Cluster Network and Disk"
      timezone: "Universal"
      cluster:
        name: "{{ ClusterName }}"
      networks:
        - is_connected: True
          subnet:
            name: "{{ NetworkName }}"
      disks:
        - type: "DISK"
          size_gb: 10
          bus: "PCI"
    register: result
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: 'Unable to create VM with Cluster , Network, Universal time zone, one Disk'
      success_msg: 'VM with Cluster , Network, Universal time zone, one Disk created successfully '
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'
    
  ########################################################################################  
  
  - name: VM with Cluster, different Disks, Memory size
    ntnx_vms:
      state: present
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      name: "VM with different disks"
      timezone: "UTC"
      cluster:
        name: "{{ ClusterName }}"
      disks:
        - type: "DISK"
          size_gb: 10
          bus: "SATA"
        - type: "DISK"
          size_gb: 30
          bus: "SCSI"
      memory_gb: 20
    register: result
    ignore_errors: True
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: 'Unable to create VM with Cluster, different Disks, Memory size'
      success_msg: 'VM with Cluster, different Disks, Memory size created successfully '

  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'
    
    
  #####################################################################################
  
  - name: VM with Cluster, different CDROMs
    ntnx_vms:
      state: present
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      name: "VM with multiple CDROMs"
      cluster:
        name: "{{ ClusterName }}"
      disks:
        - type: "CDROM"
          size_gb: 10
          bus: "SATA"
        - type: "CDROM"
          size_gb: 10
          bus: "IDE"
      cores_per_vcpu: 1
    register: result
    ignore_errors: True
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to Create VM with Cluster, different CDROMS '
      success_msg: ' VM with Cluster, different CDROMS created successfully '
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'
      

  ####################################################################################
  
  - name: VM with all specification
    ntnx_vms:
      state: present
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      name: "All specification"
      timezone: "GMT"
      cluster:
        name: "{{ ClusterName }}"
      disks:
        - type: "DISK"
          size_gb: 2
          bus: "SCSI"
        - type: "DISK"
          size_gb: 10
          bus: "PCI"
        - type: "DISK"
          size_gb: 2
          bus: "SATA"
        - type: "DISK"
          size_gb: 10
          bus: "SCSI"
        - type: "CDROM"
          size_gb: 10
          bus: "IDE"
      boot_config: 
        boot_type: "LEGACY"
        boot_order:
            - "DISK"
            - "CDROM"
            - "NETWORK"
      vcpus: 2
      cores_per_vcpu: 2
      memory_gb: 2
    register: result
    ignore_errors: True 
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with all specification '
      success_msg: ' VM with all specification created successfully '
      
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

  ##################################################################################################
  

  - name: VM with managed subnet 
    ntnx_vms:
      state: present
      name: VM with managed subnet
      nutanix_host: "{{ IP }}"
      validate_certs: False
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      cluster:
        name: "{{ ClusterName }}"
      networks:
        - is_connected: true
          subnet: 
            name: "{{ StaticNetworkName }}"
          private_ip: "{{ StaticNetworkIP }}"
    register: result
    ignore_errors: true
    
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with managed subnet '
      success_msg: ' VM with with managed subnet created successfully '
      
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

      
  ###################################################################################################
  
  - name: VM with minimum requiremnts
    ntnx_vms:
      state: present
      name: MinReqVM
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      cluster:
        name: "{{ ClusterName }}"
    register: result
    ignore_errors: true
    
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with minimum requiremnts '
      success_msg: ' VM with minimum requiremnts created successfully '
      
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

      
  ##################################################################################################
  
  - name: VM with unmanaged vlan
    ntnx_vms:
      desc: "VM with unmanaged vlan"
      state: present
      name: VM with unmanaged vlan
      timezone: UTC
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      cluster:
        name: "{{ ClusterName }}"
      networks:
        - is_connected: false
          subnet:
            uuid: "{{ dhcpUUID }}"
      boot_config: 
        boot_type: LEGACY
        boot_order:
          - DISK
          - CDROM
          - NETWORK
      vcpus: 1
      cores_per_vcpu: 1
      memory_gb: 1
    register: result
    ignore_errors: true
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with unmanaged vlan '
      success_msg: ' VM with unmanaged vlan created successfully '
      
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

  #################################################################################################    
  
  - name: VM with diffrent disk types and diffrent sizes with UEFI boot type
    ntnx_vms:
      state: present
      name: VM with UEFI boot type 
      timezone: GMT
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      cluster:
        name: "{{ ClusterName }}"
      categories:
        AppType:
          - Apache_Spark
      disks:
        - type: "DISK"
          clone_image: 
            name: "{{ Ubuntu }}"
          bus: "SCSI"
          size_gb: 20
        - type: DISK
          size_gb: 1
          bus: SCSI
        - type: DISK
          size_gb: 2
          bus: PCI
          storage_container:
            name: "{{ StorageContainerName }}"
        - type: DISK
          size_gb: 3
          bus: SATA
      boot_config: 
        boot_type: UEFI
        boot_order:
          - DISK
          - CDROM
          - NETWORK
      vcpus: 2
      cores_per_vcpu: 1
      memory_gb: 1
    register: result
    
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with diffrent disk types and diffrent sizes with UEFI boot type '
      success_msg: ' VM with diffrent disk types and diffrent sizes with UEFI boot type created successfully '
      
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

  ######################################################################################
   
  - name: VM with managed and unmanaged network
    ntnx_vms:
      state: present
      name: VM_NIC
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      timezone: UTC
      cluster:
        name: "{{ ClusterName }}"
      networks:
        - is_connected: true
          subnet:
            uuid: "{{ dhcpUUID }}"
        - is_connected: true
          subnet:
            uuid: "{{ StaticNetworkUUID }}"
      disks:
        - type: DISK
          size_gb: 1
          bus: SCSI
        - type: DISK
          size_gb: 3
          bus: PCI
        - type: CDROM
          bus: SATA
          size_gb: 1
        - type: CDROM
          bus: IDE
          size_gb: 1
      boot_config: 
        boot_type: UEFI
        boot_order:
          - DISK
          - CDROM
          - NETWORK
      vcpus: 2
      cores_per_vcpu: 2
      memory_gb: 2
    register: result
    ignore_errors: true
    
  - name: Creation Status
    assert:
      that:
        - result.response is defined
        - result.response.status.state == 'COMPLETE'
      fail_msg: ' Unable to create VM with managed and unmanaged network '
      success_msg: ' VM with managed and unmanaged network created successfully '
      
  - set_fact:
      todelete: '{{ todelete + [  result["response"]["metadata"]["uuid"] ] }}'

      
  #########################################################################################
  - name: Delete all Created VM
    
    ntnx_vms:
      state: absent
      nutanix_host: "{{ IP }}"
      nutanix_username: "{{ username }}"
      nutanix_password: "{{ password }}"
      validate_certs: False
      vm_uuid: '{{ item }}'
    register: result
    loop: '{{ todelete }}'

  
  
  