---
- name: VM playbook
  hosts: localhost
  gather_facts: false
  collections:
    - nutanix.ncp
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <host_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
  - name: Setting Variables
    set_fact:
        cluster_name: ""
        script_path: ""
        subnet_name: ""
        image_name: ""
        
  - name: create Vm
    ntnx_vms:
      state: present
      name: "ansible_automation_demo"
      desc: "ansible_vm_description"
      categories:
        AppType:
          - "Apache_Spark"
      cluster:
        name: "{{cluster_name}}"
      networks:
        - is_connected: True
          subnet:
            name: "{{ subnet_name }}"
      disks:
        - type: "DISK"
          size_gb: 30
          bus: "SATA"
          clone_image:
            name: "{{ image_name }}"
      vcpus: 1
      cores_per_vcpu: 1
      memory_gb: 1
      guest_customization:
        type: "cloud_init"
        script_path: "{{ script_path }}"
        is_overridable: True
    register: output

  - name: output of list Subnets
    debug:
      msg: '{{ output }}'

  - name: delete VM
    ntnx_vms:
      state: absent
      vm_uuid: "{{output.vm_uuid}}"
      register: output

###### VM OPERATIONS ########

  - name: hard power off the vm
    ntnx_vms:
        state: present
        vm_uuid: "{{ vm_uuid }}"
        operations: hard_poweroff
    register: result
    ignore_errors: true
    
  - name: create_ova_image  while vm is on
    ntnx_vms:
        state: present
        vm_uuid: "{{ vm_uuid }}"
        operations: create_ova_image
        ova_name: integration_test_VMDK_ova
        ova_file_format: VMDK
        wait: true
    register: result
    ignore_errors: true
  - name: clone vm while it's off and add network and script 
    ntnx_vms:
        state: present
        vm_uuid: "{{ vm_uuid }}"
        operations: clone
        networks:
          - is_connected: true
            subnet:
              name: "{{ subnet_name }}"
        guest_customization:
          type: "cloud_init"
          script_path: "{{ script_path }}"
          is_overridable: True
    register: result
    ignore_errors: true
