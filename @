---
<<<<<<< HEAD
- name: Create floating ip with external subnet uuid
=======
- name: create Floating IP with External Subnet uuid
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    wait: False
    external_subnet:
      uuid: "{{ external_subnet.uuid }}"
  register: result
  ignore_errors: True

<<<<<<< HEAD
- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"


- name: Create floating ip with vpc name and external subnet uuid
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      uuid: "{{external_subnet.uuid}}"
    vpc:
       name: "{{ vpc.name }}"
    private_ip: "{{ private_ip }}"
  register: result
  ignore_errors: True

=======
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vpc "
    success_msg: " Floating ip with vpc created successfully "

- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"

- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"

- set_fact:
<<<<<<< HEAD
    todelete: []

- name: Create floating ip with external subnet name
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    wait: False
    external_subnet:
      name: "{{ external_subnet.name }}"
  register: result
  ignore_errors: True

- set_fact:
=======
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
    todelete: "{{ todelete + [  result.fip_uuid ] }}"


- name: Create floating ip with vpc uuid and external subnet name
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      name: "{{ external_subnet.name }}"
    vpc:
       uuid: "{{ vpc.uuid }}"
    private_ip: "{{ private_ip }}"
  register: result
  ignore_errors: True
- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
    
- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True 
 
- set_fact:
    todelete: []


- name: Create floating ip with external subnet and vm name
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      name: "{{ vm_subnet_name }}"
    vm:
      name: "{{ vm.name }}"
  ignore_errors: True

  register: result

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
    fail_msg: " Unable to create floating ip with vm"
    success_msg: " Floating ip created successfully with vm "

- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
 

- name: Delete all created floating ips
  ntnx_floating_ips:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
<<<<<<< HEAD
    fip_uuid: "{{ item }}"
=======
    fip_uuid: "{{result.fip_uuid}}"
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True 
 
- set_fact:
    todelete: []
 

- name: Create floating ip with external subnet and vm uuid
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      name: "{{ vm_subnet_name }}"
    vm:
      uuid: "{{ vm.uuid }}"
  ignore_errors: True

<<<<<<< HEAD
=======

- name: create Floating IP with External Subnet with vm
  ntnx_floating_ips:
    validate_certs: False
    state: present
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    external_subnet:
      name: "{{vm_subnet_name}}"
    vm:
      name: "{{vm.name}}"
  ignore_errors: True

>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
  register: result

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
<<<<<<< HEAD
    fail_msg: " Unable to create floating ip with vm"
    success_msg: " Floating ip created successfully with vm "

- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"



- name: Delete all created floating ips
=======
    fail_msg: " Unable to create  Floating ip with vm"
    success_msg: "  Floating ip created successfully with vm "

- set_fact:
    todelete: "{{ todelete + [  result.fip_uuid ] }}"
 

- name: Delete all Created Floating ips
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
  ntnx_floating_ips:
    state: absent
    nutanix_host: "{{ ip }}"
    nutanix_username: "{{ username }}"
    nutanix_password: "{{ password }}"
    validate_certs: false
    fip_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
<<<<<<< HEAD
  ignore_errors: True
=======
  ignore_errors: True
  
>>>>>>> aaaa2ec02590df0bd3e4f2a5df4a54042ae483e3
